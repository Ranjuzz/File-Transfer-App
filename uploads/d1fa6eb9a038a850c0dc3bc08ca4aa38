import express from "express"
import { config as dotenvConfig } from 'dotenv';
dotenvConfig();
import path from 'path';
import multer from "multer";
import mongoose from "mongoose";
import  File  from "./models/File.js";
// const fs = require("fs")

// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAnalytics, isSupported } from "firebase/analytics";

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyBTEmg-FQPtNH5G5zB0O_YybU6FO4tiK2w",
  authDomain: "file-sharing-f972e.firebaseapp.com",
  databaseURL: "https://file-sharing-f972e-default-rtdb.firebaseio.com",
  projectId: "file-sharing-f972e",
  storageBucket: "file-sharing-f972e.appspot.com",
  messagingSenderId: "820251452874",
  appId: "1:820251452874:web:c3077bfd51f9c6ec235b33",
  measurementId: "G-EXJKKRTJK8"
};

// Initialize Firebase
const fapp = initializeApp(firebaseConfig);

// Check if Firebase Analytics is supported before initializing
if (isSupported()) {
  const analytics = getAnalytics(fapp);
} else {
  console.log("Firebase Analytics is not supported in this environment.");
}




const upload = multer({ dest: "uploads" });

const app = express();

// Middleware setup
app.use(express.urlencoded({ extended: true }));
app.set('views', path.join(__dirname, 'views'));
app.set("view engine", "ejs");
app.use(express.static(path.join(__dirname, 'public')));

// Database Connection
mongoose.connect(process.env.DATABASE_URL);

// Routes
app.get("/", (req, res) => {
    res.render("index");
});

app.post("/upload", upload.single("file"), async (req, res) => {
    const fileData = {
        path: req.file.path,
        originalname: req.file.originalname,
    };
    console.log(req.file);
    const file = await File.create(fileData);
    res.render("index", { fileLink: `${process.env.APP_BASE_URL}/${file.id}` });
});

app.route("/:id")
    .get(handleDownload)
    .post(handleDownload);

// Function to handle file download
async function handleDownload(req, res) {
    try {
        const file = await File.findById(req.params.id);
        file.downloadCount++;
        await file.save();
        console.log(file);
        res.download(file.path, file.originalname);
    } catch (error) {
        console.error(error);
        res.status(500).send("Error downloading the file");
    }
}

// Server Setup
const port = process.env.PORT || 3000; // Fallback to port 3000 if PORT env variable is not provided
app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});
